//------------------------------------------------------------------------------
// <auto-generated>
//    Codice generato da un modello.
//
//    Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//    Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ccDemo_devRISEntities : DbContext
    {
        public ccDemo_devRISEntities()
            : base("name=ccDemo_devRISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Media> Media { get; set; }
        public DbSet<Menu> Menu { get; set; }
        public DbSet<Profili> Profili { get; set; }
        public DbSet<hlt_certificato> hlt_certificato { get; set; }
        public DbSet<hlt_certificato_backup> hlt_certificato_backup { get; set; }
        public DbSet<hlt_conclusioni> hlt_conclusioni { get; set; }
        public DbSet<hlt_conclusioni_backup> hlt_conclusioni_backup { get; set; }
        public DbSet<hlt_daticlinici> hlt_daticlinici { get; set; }
        public DbSet<hlt_daticlinici_backup> hlt_daticlinici_backup { get; set; }
        public DbSet<hlt_documenti> hlt_documenti { get; set; }
        public DbSet<hlt_documenti_backup> hlt_documenti_backup { get; set; }
        public DbSet<hlt_gestionefirme> hlt_gestionefirme { get; set; }
        public DbSet<hlt_gestionefirme_backup> hlt_gestionefirme_backup { get; set; }
        public DbSet<hlt_LabelTabelle> hlt_LabelTabelle { get; set; }
        public DbSet<hlt_ListaValoriLabel> hlt_ListaValoriLabel { get; set; }
        public DbSet<hlt_note> hlt_note { get; set; }
        public DbSet<hlt_note_backup> hlt_note_backup { get; set; }
        public DbSet<hlt_permessi_x_episodio> hlt_permessi_x_episodio { get; set; }
        public DbSet<hlt_permessi_x_episodio_backup> hlt_permessi_x_episodio_backup { get; set; }
        public DbSet<hlt_plantari> hlt_plantari { get; set; }
        public DbSet<hlt_richieste> hlt_richieste { get; set; }
        public DbSet<hlt_richieste_backup> hlt_richieste_backup { get; set; }
        public DbSet<hlt_richiesteesterne> hlt_richiesteesterne { get; set; }
        public DbSet<hlt_richiesteesterne_backup> hlt_richiesteesterne_backup { get; set; }
        public DbSet<hlt_ricradiologica> hlt_ricradiologica { get; set; }
        public DbSet<hlt_ricradiologica_backup> hlt_ricradiologica_backup { get; set; }
        public DbSet<hlt_schedavalutazione> hlt_schedavalutazione { get; set; }
        public DbSet<hlt_schedavalutazione_backup> hlt_schedavalutazione_backup { get; set; }
        public DbSet<hlt_TableListaCampi> hlt_TableListaCampi { get; set; }
        public DbSet<hlt_terapiafarmacologica> hlt_terapiafarmacologica { get; set; }
        public DbSet<hlt_terapiafarmacologica_backup> hlt_terapiafarmacologica_backup { get; set; }
        public DbSet<hlt_vavc_old> hlt_vavc_old { get; set; }
        public DbSet<hlt_vavcmint> hlt_vavcmint { get; set; }
        public DbSet<hlt_vavcort> hlt_vavcort { get; set; }
        public DbSet<hlt_vavcort_backup> hlt_vavcort_backup { get; set; }
        public DbSet<hlt_vavcport> hlt_vavcport { get; set; }
        public DbSet<hlt_vavi_old> hlt_vavi_old { get; set; }
        public DbSet<hlt_vavimint> hlt_vavimint { get; set; }
        public DbSet<hlt_vaviort> hlt_vaviort { get; set; }
        public DbSet<hlt_vaviort_backup> hlt_vaviort_backup { get; set; }
        public DbSet<hlt_vaviport> hlt_vaviport { get; set; }
        public DbSet<hlt_vcardmf> hlt_vcardmf { get; set; }
        public DbSet<hlt_vcol> hlt_vcol { get; set; }
        public DbSet<hlt_vfisiov> hlt_vfisiov { get; set; }
        public DbSet<hlt_vmarvis> hlt_vmarvis { get; set; }
        public DbSet<hlt_vmarvisp> hlt_vmarvisp { get; set; }
        public DbSet<hlt_vrdv001> hlt_vrdv001 { get; set; }
        public DbSet<hlt_vrdv001_backup> hlt_vrdv001_backup { get; set; }
        public DbSet<MenuProfili> MenuProfili { get; set; }
    
        [EdmFunction("ccDemo_devRISEntities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[ccDemo_devRISEntities].[fnSplitString](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int cc_Reports_CartellaClinicaIUSM(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cc_Reports_CartellaClinicaIUSM", idEpisodioParameter);
        }
    
        public virtual int cc_Reports_CartellaClinicaIUSM_sportPraticato(Nullable<int> seriale)
        {
            var serialeParameter = seriale.HasValue ?
                new ObjectParameter("Seriale", seriale) :
                new ObjectParameter("Seriale", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cc_Reports_CartellaClinicaIUSM_sportPraticato", serialeParameter);
        }
    
        public virtual int cc_Shortcut(Nullable<int> idMedico)
        {
            var idMedicoParameter = idMedico.HasValue ?
                new ObjectParameter("IdMedico", idMedico) :
                new ObjectParameter("IdMedico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cc_Shortcut", idMedicoParameter);
        }
    
        public virtual ObjectResult<hltsp_ConfigCC_ControlloMedico_Result> hltsp_ConfigCC_ControlloMedico(string nominativo, string codAzienda)
        {
            var nominativoParameter = nominativo != null ?
                new ObjectParameter("Nominativo", nominativo) :
                new ObjectParameter("Nominativo", typeof(string));
    
            var codAziendaParameter = codAzienda != null ?
                new ObjectParameter("CodAzienda", codAzienda) :
                new ObjectParameter("CodAzienda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<hltsp_ConfigCC_ControlloMedico_Result>("hltsp_ConfigCC_ControlloMedico", nominativoParameter, codAziendaParameter);
        }
    
        public virtual int hltsp_GetUsersByFilters(string name, Nullable<bool> enabled, Nullable<System.DateTime> expireDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("hltsp_GetUsersByFilters", nameParameter, enabledParameter, expireDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> hltsp_IntegrazioneCC_InsertMediaFile(string pMimeType, byte[] pMediaContent, Nullable<int> pMediaLenght, Nullable<int> pIdEpisodio, Nullable<short> pLinkType, Nullable<int> pLinkId, string pOriginalName, Nullable<int> pIdCategoria)
        {
            var pMimeTypeParameter = pMimeType != null ?
                new ObjectParameter("pMimeType", pMimeType) :
                new ObjectParameter("pMimeType", typeof(string));
    
            var pMediaContentParameter = pMediaContent != null ?
                new ObjectParameter("pMediaContent", pMediaContent) :
                new ObjectParameter("pMediaContent", typeof(byte[]));
    
            var pMediaLenghtParameter = pMediaLenght.HasValue ?
                new ObjectParameter("pMediaLenght", pMediaLenght) :
                new ObjectParameter("pMediaLenght", typeof(int));
    
            var pIdEpisodioParameter = pIdEpisodio.HasValue ?
                new ObjectParameter("pIdEpisodio", pIdEpisodio) :
                new ObjectParameter("pIdEpisodio", typeof(int));
    
            var pLinkTypeParameter = pLinkType.HasValue ?
                new ObjectParameter("pLinkType", pLinkType) :
                new ObjectParameter("pLinkType", typeof(short));
    
            var pLinkIdParameter = pLinkId.HasValue ?
                new ObjectParameter("pLinkId", pLinkId) :
                new ObjectParameter("pLinkId", typeof(int));
    
            var pOriginalNameParameter = pOriginalName != null ?
                new ObjectParameter("pOriginalName", pOriginalName) :
                new ObjectParameter("pOriginalName", typeof(string));
    
            var pIdCategoriaParameter = pIdCategoria.HasValue ?
                new ObjectParameter("pIdCategoria", pIdCategoria) :
                new ObjectParameter("pIdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("hltsp_IntegrazioneCC_InsertMediaFile", pMimeTypeParameter, pMediaContentParameter, pMediaLenghtParameter, pIdEpisodioParameter, pLinkTypeParameter, pLinkIdParameter, pOriginalNameParameter, pIdCategoriaParameter);
        }
    
        public virtual int spCcOrtopediaSantucciVisiteBySerialeCC(Nullable<int> seriale)
        {
            var serialeParameter = seriale.HasValue ?
                new ObjectParameter("Seriale", seriale) :
                new ObjectParameter("Seriale", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCcOrtopediaSantucciVisiteBySerialeCC", serialeParameter);
        }
    
        public virtual ObjectResult<spControlloOperatore_Result> spControlloOperatore(string prefixTable, Nullable<int> idServizioEpisodio, Nullable<int> idMedico, Nullable<int> idOperatore, string username)
        {
            var prefixTableParameter = prefixTable != null ?
                new ObjectParameter("PrefixTable", prefixTable) :
                new ObjectParameter("PrefixTable", typeof(string));
    
            var idServizioEpisodioParameter = idServizioEpisodio.HasValue ?
                new ObjectParameter("IdServizioEpisodio", idServizioEpisodio) :
                new ObjectParameter("IdServizioEpisodio", typeof(int));
    
            var idMedicoParameter = idMedico.HasValue ?
                new ObjectParameter("IdMedico", idMedico) :
                new ObjectParameter("IdMedico", typeof(int));
    
            var idOperatoreParameter = idOperatore.HasValue ?
                new ObjectParameter("IdOperatore", idOperatore) :
                new ObjectParameter("IdOperatore", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spControlloOperatore_Result>("spControlloOperatore", prefixTableParameter, idServizioEpisodioParameter, idMedicoParameter, idOperatoreParameter, usernameParameter);
        }
    
        public virtual ObjectResult<spControlloPermesso_Result> spControlloPermesso(Nullable<int> idEpisodio, string username)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spControlloPermesso_Result>("spControlloPermesso", idEpisodioParameter, usernameParameter);
        }
    
        public virtual ObjectResult<spControlloPermessoReadOnly_Result> spControlloPermessoReadOnly(string prefixTable, Nullable<int> idEpisodio, string username)
        {
            var prefixTableParameter = prefixTable != null ?
                new ObjectParameter("PrefixTable", prefixTable) :
                new ObjectParameter("PrefixTable", typeof(string));
    
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spControlloPermessoReadOnly_Result>("spControlloPermessoReadOnly", prefixTableParameter, idEpisodioParameter, usernameParameter);
        }
    
        public virtual int spDeleteConstraintDefaultValue(string table_name, string col_name)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var col_nameParameter = col_name != null ?
                new ObjectParameter("col_name", col_name) :
                new ObjectParameter("col_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteConstraintDefaultValue", table_nameParameter, col_nameParameter);
        }
    
        public virtual int spElencoCartelleGetByIdEpisodio(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spElencoCartelleGetByIdEpisodio", idEpisodioParameter);
        }
    
        public virtual int spGetDatiAnagraficiByEpisodioInTable(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDatiAnagraficiByEpisodioInTable", idEpisodioParameter);
        }
    
        public virtual int spGetDatiAnagraficiByIdEpisodio(Nullable<int> idEpisodio, Nullable<int> idServizioEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            var idServizioEpisodioParameter = idServizioEpisodio.HasValue ?
                new ObjectParameter("IdServizioEpisodio", idServizioEpisodio) :
                new ObjectParameter("IdServizioEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDatiAnagraficiByIdEpisodio", idEpisodioParameter, idServizioEpisodioParameter);
        }
    
        public virtual ObjectResult<spGetDatiAnagraficiByIdEpisodio_old_Result> spGetDatiAnagraficiByIdEpisodio_old(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDatiAnagraficiByIdEpisodio_old_Result>("spGetDatiAnagraficiByIdEpisodio_old", idEpisodioParameter);
        }
    
        public virtual ObjectResult<spGetDatiMedico_Result> spGetDatiMedico(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDatiMedico_Result>("spGetDatiMedico", userNameParameter);
        }
    
        public virtual ObjectResult<spGetDocumentiByIdEpisodio_Result> spGetDocumentiByIdEpisodio(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDocumentiByIdEpisodio_Result>("spGetDocumentiByIdEpisodio", idEpisodioParameter);
        }
    
        public virtual ObjectResult<string> spGetEpisodiByPermessiByUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetEpisodiByPermessiByUser", usernameParameter);
        }
    
        public virtual int spGetIdServizioEpisodioByIdEpisodio(Nullable<int> idEpisodio)
        {
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetIdServizioEpisodioByIdEpisodio", idEpisodioParameter);
        }
    
        public virtual ObjectResult<spGetServiziByAzienda_Result> spGetServiziByAzienda(string prefixTable, string azienda)
        {
            var prefixTableParameter = prefixTable != null ?
                new ObjectParameter("PrefixTable", prefixTable) :
                new ObjectParameter("PrefixTable", typeof(string));
    
            var aziendaParameter = azienda != null ?
                new ObjectParameter("Azienda", azienda) :
                new ObjectParameter("Azienda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiziByAzienda_Result>("spGetServiziByAzienda", prefixTableParameter, aziendaParameter);
        }
    
        public virtual ObjectResult<spGetServiziByIdEpisodio_Result> spGetServiziByIdEpisodio(string prefixTable, Nullable<int> idEpisodio)
        {
            var prefixTableParameter = prefixTable != null ?
                new ObjectParameter("PrefixTable", prefixTable) :
                new ObjectParameter("PrefixTable", typeof(string));
    
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiziByIdEpisodio_Result>("spGetServiziByIdEpisodio", prefixTableParameter, idEpisodioParameter);
        }
    
        public virtual int spGridPazientiPresenti(string azienda, Nullable<System.DateTime> dataDal, Nullable<System.DateTime> dataAl, Nullable<int> idEpisodio, string nominativo, string tipoEpisodio, string cartella, string camera, string stato, Nullable<int> idMedico, Nullable<int> pagina, Nullable<int> numRows, string orderby, string type, Nullable<int> maxNumRows)
        {
            var aziendaParameter = azienda != null ?
                new ObjectParameter("Azienda", azienda) :
                new ObjectParameter("Azienda", typeof(string));
    
            var dataDalParameter = dataDal.HasValue ?
                new ObjectParameter("DataDal", dataDal) :
                new ObjectParameter("DataDal", typeof(System.DateTime));
    
            var dataAlParameter = dataAl.HasValue ?
                new ObjectParameter("DataAl", dataAl) :
                new ObjectParameter("DataAl", typeof(System.DateTime));
    
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            var nominativoParameter = nominativo != null ?
                new ObjectParameter("Nominativo", nominativo) :
                new ObjectParameter("Nominativo", typeof(string));
    
            var tipoEpisodioParameter = tipoEpisodio != null ?
                new ObjectParameter("TipoEpisodio", tipoEpisodio) :
                new ObjectParameter("TipoEpisodio", typeof(string));
    
            var cartellaParameter = cartella != null ?
                new ObjectParameter("Cartella", cartella) :
                new ObjectParameter("Cartella", typeof(string));
    
            var cameraParameter = camera != null ?
                new ObjectParameter("Camera", camera) :
                new ObjectParameter("Camera", typeof(string));
    
            var statoParameter = stato != null ?
                new ObjectParameter("Stato", stato) :
                new ObjectParameter("Stato", typeof(string));
    
            var idMedicoParameter = idMedico.HasValue ?
                new ObjectParameter("IdMedico", idMedico) :
                new ObjectParameter("IdMedico", typeof(int));
    
            var paginaParameter = pagina.HasValue ?
                new ObjectParameter("Pagina", pagina) :
                new ObjectParameter("Pagina", typeof(int));
    
            var numRowsParameter = numRows.HasValue ?
                new ObjectParameter("NumRows", numRows) :
                new ObjectParameter("NumRows", typeof(int));
    
            var orderbyParameter = orderby != null ?
                new ObjectParameter("Orderby", orderby) :
                new ObjectParameter("Orderby", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var maxNumRowsParameter = maxNumRows.HasValue ?
                new ObjectParameter("MaxNumRows", maxNumRows) :
                new ObjectParameter("MaxNumRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGridPazientiPresenti", aziendaParameter, dataDalParameter, dataAlParameter, idEpisodioParameter, nominativoParameter, tipoEpisodioParameter, cartellaParameter, cameraParameter, statoParameter, idMedicoParameter, paginaParameter, numRowsParameter, orderbyParameter, typeParameter, maxNumRowsParameter);
        }
    
        public virtual int spGridTotPazientiPresenti(string azienda, Nullable<System.DateTime> dataDal, Nullable<System.DateTime> dataAl, Nullable<int> idEpisodio, string nominativo, string tipoEpisodio, string cartella, string camera, string stato, Nullable<int> idMedico)
        {
            var aziendaParameter = azienda != null ?
                new ObjectParameter("Azienda", azienda) :
                new ObjectParameter("Azienda", typeof(string));
    
            var dataDalParameter = dataDal.HasValue ?
                new ObjectParameter("DataDal", dataDal) :
                new ObjectParameter("DataDal", typeof(System.DateTime));
    
            var dataAlParameter = dataAl.HasValue ?
                new ObjectParameter("DataAl", dataAl) :
                new ObjectParameter("DataAl", typeof(System.DateTime));
    
            var idEpisodioParameter = idEpisodio.HasValue ?
                new ObjectParameter("IdEpisodio", idEpisodio) :
                new ObjectParameter("IdEpisodio", typeof(int));
    
            var nominativoParameter = nominativo != null ?
                new ObjectParameter("Nominativo", nominativo) :
                new ObjectParameter("Nominativo", typeof(string));
    
            var tipoEpisodioParameter = tipoEpisodio != null ?
                new ObjectParameter("TipoEpisodio", tipoEpisodio) :
                new ObjectParameter("TipoEpisodio", typeof(string));
    
            var cartellaParameter = cartella != null ?
                new ObjectParameter("Cartella", cartella) :
                new ObjectParameter("Cartella", typeof(string));
    
            var cameraParameter = camera != null ?
                new ObjectParameter("Camera", camera) :
                new ObjectParameter("Camera", typeof(string));
    
            var statoParameter = stato != null ?
                new ObjectParameter("Stato", stato) :
                new ObjectParameter("Stato", typeof(string));
    
            var idMedicoParameter = idMedico.HasValue ?
                new ObjectParameter("IdMedico", idMedico) :
                new ObjectParameter("IdMedico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGridTotPazientiPresenti", aziendaParameter, dataDalParameter, dataAlParameter, idEpisodioParameter, nominativoParameter, tipoEpisodioParameter, cartellaParameter, cameraParameter, statoParameter, idMedicoParameter);
        }
    
        public virtual int spInsertServiziEpisodiOperatore(Nullable<int> idServizioEpisodio, Nullable<int> idOperatore)
        {
            var idServizioEpisodioParameter = idServizioEpisodio.HasValue ?
                new ObjectParameter("IdServizioEpisodio", idServizioEpisodio) :
                new ObjectParameter("IdServizioEpisodio", typeof(int));
    
            var idOperatoreParameter = idOperatore.HasValue ?
                new ObjectParameter("IdOperatore", idOperatore) :
                new ObjectParameter("IdOperatore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertServiziEpisodiOperatore", idServizioEpisodioParameter, idOperatoreParameter);
        }
    
        public virtual ObjectResult<spMenu_Result> spMenu(Nullable<int> idProfilo)
        {
            var idProfiloParameter = idProfilo.HasValue ?
                new ObjectParameter("IdProfilo", idProfilo) :
                new ObjectParameter("IdProfilo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMenu_Result>("spMenu", idProfiloParameter);
        }
    
        public virtual ObjectResult<spPazientiPresenti_Result> spPazientiPresenti(string azienda, Nullable<int> pagina, Nullable<int> numRows)
        {
            var aziendaParameter = azienda != null ?
                new ObjectParameter("Azienda", azienda) :
                new ObjectParameter("Azienda", typeof(string));
    
            var paginaParameter = pagina.HasValue ?
                new ObjectParameter("Pagina", pagina) :
                new ObjectParameter("Pagina", typeof(int));
    
            var numRowsParameter = numRows.HasValue ?
                new ObjectParameter("NumRows", numRows) :
                new ObjectParameter("NumRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPazientiPresenti_Result>("spPazientiPresenti", aziendaParameter, paginaParameter, numRowsParameter);
        }
    
        public virtual int spPazientiPresentiSearch(string nominativo, string cartella, Nullable<System.DateTime> dataDal, Nullable<System.DateTime> dataAl, string reparto)
        {
            var nominativoParameter = nominativo != null ?
                new ObjectParameter("Nominativo", nominativo) :
                new ObjectParameter("Nominativo", typeof(string));
    
            var cartellaParameter = cartella != null ?
                new ObjectParameter("Cartella", cartella) :
                new ObjectParameter("Cartella", typeof(string));
    
            var dataDalParameter = dataDal.HasValue ?
                new ObjectParameter("DataDal", dataDal) :
                new ObjectParameter("DataDal", typeof(System.DateTime));
    
            var dataAlParameter = dataAl.HasValue ?
                new ObjectParameter("DataAl", dataAl) :
                new ObjectParameter("DataAl", typeof(System.DateTime));
    
            var repartoParameter = reparto != null ?
                new ObjectParameter("Reparto", reparto) :
                new ObjectParameter("Reparto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPazientiPresentiSearch", nominativoParameter, cartellaParameter, dataDalParameter, dataAlParameter, repartoParameter);
        }
    
        public virtual int spPrintElencoCartelle(Nullable<System.DateTime> dataDal, Nullable<System.DateTime> dataAl, string username)
        {
            var dataDalParameter = dataDal.HasValue ?
                new ObjectParameter("DataDal", dataDal) :
                new ObjectParameter("DataDal", typeof(System.DateTime));
    
            var dataAlParameter = dataAl.HasValue ?
                new ObjectParameter("DataAl", dataAl) :
                new ObjectParameter("DataAl", typeof(System.DateTime));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPrintElencoCartelle", dataDalParameter, dataAlParameter, usernameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTotPazientiPresenti(string azienda)
        {
            var aziendaParameter = azienda != null ?
                new ObjectParameter("Azienda", azienda) :
                new ObjectParameter("Azienda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTotPazientiPresenti", aziendaParameter);
        }
    }
}
